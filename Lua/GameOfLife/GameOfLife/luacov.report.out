==============================================================================
.\FrameMaker.lua
==============================================================================

       1 Frame = require "entity.Frame"
       1 FileInputHandler = require ("input.FileInputHandler").getInstance()
       1 local read = io.read

       1 local FrameMaker = {}

       1 function FrameMaker:getInstance()

       1     local instance = {}

             local createFrame = function()

       1         local frame = {}

       1         print("Do you want to load the map from a file? Y - Yes\t N - No")

       1         if(string.upper(read()) == "Y" ) then
       1             frame = instance.loadFromFile(frame)
                 else
*******0             frame = instance.createIndividual(frame)
                 end

       1         frame.duration = instance.getValue("How many generations do you want to simulate?")

       1         return frame
             end

             instance.createIndividual = function(frame)
*******0         print("\nI - Individual settings\t G - General settings")

*******0         if(string.upper(read()) == "G")
                 then
*******0             frame = Frame(
*******0                 instance.getValue("Please enter the width of the testframe (integer value):"),  -- Frame height
*******0                 instance.getValue("Please enter the height of the testframe (integer value):")  -- Frame width
                     )
                 else
*******0             frame = Frame(
*******0                 instance.getValue("Please enter the width of the testframe (integer value):"),   -- Frame height
*******0                 instance.getValue("Please enter the height of the testframe (integer value):"), -- Frame width
*******0                 instance.getValue("Please enter the elapsed time between two generations (in millisec)!"),  -- timeBetweenGens
*******0                 instance.getValue("Please enter the rate of the living cells - (1 / rate) will be the chance - (choose at least 2)!")   --chance
                     )
                 end

*******0         return frame
             end

             instance.getValue = function(msg)
       1         local correct = false
                 local value

       2         while(correct ~= true) do

       1             print("\n"..msg.."\t")
       1             value = tonumber(read())
       1             if(type(value) == type(0)) then
       1                 correct = true
                     else
*******0                 print("Type error! Please use integer value!")
                     end
                 end

       1         return value
             end

             instance.loadFromFile = function(frame)

       1         print("\nDo you want to load a pre-defined map? Y - Yes\t N - No")
       1         print("*Note: If you run this app in command promt please make sure that you are in the root directory of the game!*")

       1         if(string.upper(read()) == "Y") then
       1             print("\nPlease enter the name of the pre-defined map (only the name - no extension - )!")
       1             frame = FileInputHandler.createFrameFromFile(read())

                 else
*******0             print("\nPlease enter the absolute path of the test map!")
*******0             frame = FileInputHandler.createFrameFromFile(read(), false)
                 end

       1         return frame

             end

       1     return {
       1         createFrame = createFrame
       1     }
         end

       1 return FrameMaker


==============================================================================
.\entity\Cell.lua
==============================================================================

       1 StateType = require "type.StateType"
       1 ChangeType = require "type.ChangeType"

       1 local Cell = {
       1     state = "",
       1     changeState = 0
         }

       2 setmetatable(Cell, {
             __call = function(class, ...)
      36         return class:CreateCell(...)
             end
         })

       1 function Cell:CreateCell(state)
      36     local newCell = setmetatable({}, self)
      36     self.__index = self
      36     newCell.state = state
      36     newCell.neighbors = {}
      36     return newCell
         end

       1 function Cell:checkState()
     180     local livingNeighbors = 0

    1620     for _, cell in ipairs(self.neighbors) do
    1440         if(cell.state == StateType.ALIVE) then
     240             livingNeighbors = livingNeighbors + 1
                 end
             end

     180     if(livingNeighbors > 3 or livingNeighbors < 2) then
     122         if(self.state == StateType.ALIVE) then
      20             self.changeState = ChangeType.DIE
                 else
     102             self.changeState = ChangeType.NOTHING
                 end
             else
      58         if(self.state == StateType.DEAD and livingNeighbors == 3) then
      20             self.changeState = ChangeType.BIRTH
                 else
      38             self.changeState = ChangeType.NOTHING
                 end
             end

         end

       1 function Cell:die()
     180     if(self.changeState == ChangeType.DIE) then
      20         self.state = StateType.DEAD
             end
         end

       1 function Cell:birth()
     180     if(self.changeState == ChangeType.BIRTH) then
      20         self.state = StateType.ALIVE
             end
         end

       1 return Cell

==============================================================================
.\entity\Frame.lua
==============================================================================

       1 local Cell = require "entity.Cell"
       1 local StateType = require "type.StateType"

       1 local Frame = {
       1     generationCounter = 0,
       1     duration = 100,
         }

       2 setmetatable(Frame, {
             __call = function(class, ...)
       1         return class:CreateFrame(...)
             end
         })

       1 function Frame:CreateFrame(height, width, timeBetweenGens, chance)
       1     local newFrame = setmetatable({}, self)
       1     self.__index = self
       1     newFrame.height = height or 20
       1     newFrame.width = width or 20
       1     newFrame.timeBetweenGens = timeBetweenGens or 400.0
       1     newFrame.chance =  chance or 4
       1     newFrame.cells = {}

       1     newFrame:init()

       1     return newFrame
         end

       1 function Frame:init()

       7     for i = 1, self.height, 1 do
       6         table.insert(self.cells, {})
             end

       1     local chanceGen = self.chance
       1     if(2 > chanceGen) then
*******0         chanceGen = 4
             end

       1     math.randomseed(os.time())
       7     for i = 1, self.height, 1 do

      42         for j = 1, self.width, 1 do

      36             local isAlive = (math.random(100000) % chanceGen) == 0

      36             local cellState = StateType.ALIVE

      36             if(isAlive == false) then
      31                 cellState = StateType.DEAD
                     end

      36             table.insert(self.cells[i], Cell(cellState))
                 end
             end

       1     self:createNeighbors()

         end

       1 function Frame:createNeighbors()
       7     for i = 1, self.height, 1 do
      42         for j = 1, self.width, 1 do

                     local upperRow
                     local lowerRow
                     local upperColumn
                     local lowerColumn
      36             if(i - 1 == 0) then upperRow = self.height else upperRow = i - 1 end
      36             if(i + 1 == self.height + 1) then lowerRow = 1 else lowerRow = i + 1 end
      36             if(j - 1 == 0) then upperColumn = self.width else upperColumn = j - 1 end
      36             if(j + 1 == self.width + 1) then lowerColumn = 1 else lowerColumn = j + 1 end

      36             self.cells[i][j].neighbors[#self.cells[i][j].neighbors + 1] = self.cells[upperRow][upperColumn]
      36             self.cells[i][j].neighbors[#self.cells[i][j].neighbors + 1] = self.cells[upperRow][j]
      36             self.cells[i][j].neighbors[#self.cells[i][j].neighbors + 1] = self.cells[upperRow][lowerColumn]
      36             self.cells[i][j].neighbors[#self.cells[i][j].neighbors + 1] = self.cells[i]       [upperColumn]
      36             self.cells[i][j].neighbors[#self.cells[i][j].neighbors + 1] = self.cells[i]       [lowerColumn]
      36             self.cells[i][j].neighbors[#self.cells[i][j].neighbors + 1] = self.cells[lowerRow][upperColumn]
      36             self.cells[i][j].neighbors[#self.cells[i][j].neighbors + 1] = self.cells[lowerRow][j]
      36             self.cells[i][j].neighbors[#self.cells[i][j].neighbors + 1] = self.cells[lowerRow][lowerColumn]

                 end
             end
         end

       1 function Frame:simulate()

       1     self:printResult()

       6     while(self.generationCounter < self.duration) do
       5         self:wait(self.timeBetweenGens / 1000)
       5         self:createNextGen()
             end

         end

       1 function Frame:createNextGen()

       5     self:markToDie()
       5     self:cellsBirth()
       5     self:cellsDie()

       5     self.generationCounter = self.generationCounter + 1

       5     self:printResult()
         end

       1 function Frame:getLivingCount()
       6     local livingCount = 0
      42     for i = 1, self.height, 1 do
     252         for j = 1, self.width, 1 do
     216             if(self.cells[i][j].state == StateType.ALIVE) then
      36                 livingCount = livingCount + 1
                     end
                 end
             end
       6     return livingCount

         end

       1 function Frame:markToDie()
      35     for i = 1, self.height, 1 do
     210         for j = 1, self.width, 1 do
     180             self.cells[i][j]:checkState()
                 end
             end

         end

       1 function Frame:cellsDie()
      35     for i = 1, self.height, 1 do
     210         for j = 1, self.width, 1 do
     180             self.cells[i][j]:die()
                 end
             end
         end

       1 function Frame:cellsBirth()
      35     for i = 1, self.height, 1 do
     210         for j = 1, self.width, 1 do
     180             self.cells[i][j]:birth()
                 end
             end
         end

       1 function Frame:printResult()
       6     os.execute("cls")
       6     print("Generation:".. self.generationCounter .."\tNumber of living cells: ".. self:getLivingCount() .."\n")
      42     for i = 1, self.height, 1 do
      36         io.flush()
     252         for j = 1, self.width, 1 do
     216             if(self.cells[i][j].state == StateType.ALIVE) then
      36                 io.write("#")
                     else
     180                 io.write(" ")
                     end
                 end
      36         print()
             end
       6     print()

         end


       1 function Frame:wait(seconds)
       5     local time = os.clock()
 1138101     while os.clock()-time < seconds do  end
         end

       1 return Frame

==============================================================================
.\input\FileInputHandler.lua
==============================================================================

       1 local FileInputHandler = {}


       1 function FileInputHandler:getInstance()

       1     local instance = {}

             local createFrameFromFile = function(fileName, relative)

       1         instance.fileName = fileName
       1         instance.relative = relative or true
       1         instance.lines = {}

       1         if(instance.file_exists() == false) then return error("file not found.") end

       1         instance.lines = instance.getLines()


       1         local firstLine = instance.split(instance.lines[1], " ")

       1         local error = assert( #firstLine == 3, "The context of the file is incorrect! PLease make sure to give a correct matrix definition!")
       1         if(type(error) == string) then
*******0             print(error)
                 end

       1         error = assert( #instance.lines - 1 == tonumber(firstLine[1]), "The context of the file is incorrect! PLease make sure that the number of rows is correct!")
       1         if(type(error) == string) then
*******0             print(error)
                 end

       7         for i = 2, #instance.lines, 1 do
       6             error = assert(#instance.lines[i] == tonumber(firstLine[2]), "The context of the file is incorrect! PLease make sure that the number of columns is correct!")
       6             if(type(error) == string) then
*******0                 print(error)
                     end
                 end

       1         local aliveCellType = firstLine[3]

       1         local frame = Frame(tonumber(firstLine[1]), tonumber(firstLine[2]))

       7         for i = 1, frame.height, 1 do
      42             for j = 1, frame.width, 1 do
      36                 local state = StateType.DEAD

      36                 if(string.sub(instance.lines[i + 1],j,j) == aliveCellType) then
       6                     state = StateType.ALIVE
                         end

      36                 frame.cells[i][j].state = state
                     end
                 end

       1         return frame
             end

             instance.split = function(s, delimiter)
       1         local result = {};
       4         for match in (s..delimiter):gmatch("(.-)"..delimiter) do
       3             table.insert(result, match);
                 end
       1         return result;
             end

             instance.getLines = function()

       1         if(instance.relative) then
       1             instance.fileName = "testMaps/".. instance.fileName ..".txt"
                 end

       1         local lines = {}
       8         for line in io.lines(instance.fileName) do
       7             lines[#lines + 1] = line
                 end

       1         return lines
             end

             instance.file_exists = function()
                 local result
       1         if(instance.relative) then
       1             result = assert(io.open("testMaps/".. instance.fileName ..".txt", "r"), "File not found!")
                 else
*******0             result = assert(io.open(instance.fileName , "r"), "File not found!")
                 end

       1         if( type(result) == type(" ")) then
*******0             print(result)
*******0             return false
                 else
       1             result:close()
       1             return true
                 end
             end


       1     return {
       1         createFrameFromFile = createFrameFromFile
       1     }

         end

       1 return FileInputHandler

==============================================================================
.\type\ChangeType.lua
==============================================================================

       1 local ChangeType = {
       1     DIE = "DIE",
       1     BIRTH = "BIRTH",
       1     NOTHING = "NOTHING"
         }

       1 return ChangeType

==============================================================================
.\type\StateType.lua
==============================================================================


       1 local StateType = {
       1     ALIVE = "ALIVE",
       1     DEAD = "DEAD"
         }

       1 return StateType

==============================================================================
main.lua
==============================================================================


         require "luacov"

         --require "test.unitTests"

       2 require("FrameMaker").getInstance().createFrame():simulate()

==============================================================================
Summary
==============================================================================

File                         Hits Missed Coverage
-------------------------------------------------
.\FrameMaker.lua             29   15     65.91%
.\entity\Cell.lua            32   0      100.00%
.\entity\Frame.lua           91   1      98.91%
.\input\FileInputHandler.lua 44   6      88.00%
.\type\ChangeType.lua        5    0      100.00%
.\type\StateType.lua         4    0      100.00%
main.lua                     1    0      100.00%
-------------------------------------------------
Total                        206  22     90.35%
